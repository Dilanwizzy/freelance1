/* tslint:disable */
/* eslint-disable */
/**
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'address1': string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'address3'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'googleMaps'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    'postalCode': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BusinessLocation = {
    Physcial: 'Physcial',
    Online: 'Online',
    Both: 'Both',
    All: 'All'
} as const;

export type BusinessLocation = typeof BusinessLocation[keyof typeof BusinessLocation];


/**
 * 
 * @export
 * @enum {string}
 */

export const BusinessModels = {
    Goods: 'Goods',
    Service: 'Service',
    Hybrid: 'Hybrid',
    All: 'All'
} as const;

export type BusinessModels = typeof BusinessModels[keyof typeof BusinessModels];


/**
 * 
 * @export
 * @interface BusinessResponseDto
 */
export interface BusinessResponseDto {
    /**
     * 
     * @type {string}
     * @memberof BusinessResponseDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CategoriesDto
 */
export interface CategoriesDto {
    /**
     * 
     * @type {number}
     * @memberof CategoriesDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CategoriesDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CategoriesDto
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface InformationDto
 */
export interface InformationDto {
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'facebookHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'instagramHandle'?: string;
    /**
     * 
     * @type {number}
     * @memberof InformationDto
     */
    'phone'?: number;
    /**
     * 
     * @type {number}
     * @memberof InformationDto
     */
    'phoneCountryCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'tikTokHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'xHandle'?: string;
    /**
     * 
     * @type {string}
     * @memberof InformationDto
     */
    'youtubeHandle'?: string;
}
/**
 * 
 * @export
 * @interface ListingMetadataDto
 */
export interface ListingMetadataDto {
    /**
     * 
     * @type {number}
     * @memberof ListingMetadataDto
     */
    'highestPrice': number;
    /**
     * 
     * @type {number}
     * @memberof ListingMetadataDto
     */
    'lowestPrice': number;
    /**
     * 
     * @type {Array<OpeningHoursDto>}
     * @memberof ListingMetadataDto
     */
    'openingHours': Array<OpeningHoursDto>;
}
/**
 * 
 * @export
 * @interface ListingResponseDto
 */
export interface ListingResponseDto {
    /**
     * 
     * @type {AddressDto}
     * @memberof ListingResponseDto
     */
    'address': AddressDto;
    /**
     * 
     * @type {string}
     * @memberof ListingResponseDto
     */
    'businessLocation': ListingResponseDtoBusinessLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof ListingResponseDto
     */
    'businessModel': ListingResponseDtoBusinessModelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ListingResponseDto
     */
    'canBeListed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ListingResponseDto
     */
    'description'?: string;
    /**
     * 
     * @type {InformationDto}
     * @memberof ListingResponseDto
     */
    'info'?: InformationDto;
    /**
     * 
     * @type {string}
     * @memberof ListingResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListingResponseDto
     */
    'slug': string;
    /**
     * 
     * @type {Tags}
     * @memberof ListingResponseDto
     */
    'tags': Tags;
}

export const ListingResponseDtoBusinessLocationEnum = {
    Physcial: 'Physcial',
    Online: 'Online',
    Both: 'Both',
    All: 'All'
} as const;

export type ListingResponseDtoBusinessLocationEnum = typeof ListingResponseDtoBusinessLocationEnum[keyof typeof ListingResponseDtoBusinessLocationEnum];
export const ListingResponseDtoBusinessModelEnum = {
    Goods: 'Goods',
    Service: 'Service',
    Hybrid: 'Hybrid',
    All: 'All'
} as const;

export type ListingResponseDtoBusinessModelEnum = typeof ListingResponseDtoBusinessModelEnum[keyof typeof ListingResponseDtoBusinessModelEnum];

/**
 * 
 * @export
 * @interface ListingTypeDto
 */
export interface ListingTypeDto {
    /**
     * 
     * @type {string}
     * @memberof ListingTypeDto
     */
    'icon': string;
    /**
     * 
     * @type {number}
     * @memberof ListingTypeDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ListingTypeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListingTypeDto
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface LocationResponseDto
 */
export interface LocationResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LocationResponseDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof LocationResponseDto
     */
    'ip': string;
    /**
     * 
     * @type {PointDto}
     * @memberof LocationResponseDto
     */
    'point': PointDto;
}
/**
 * 
 * @export
 * @interface MarkerBusiness
 */
export interface MarkerBusiness {
    /**
     * 
     * @type {string}
     * @memberof MarkerBusiness
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MarkerResponseDto
 */
export interface MarkerResponseDto {
    /**
     * 
     * @type {MarkerBusiness}
     * @memberof MarkerResponseDto
     */
    'business': MarkerBusiness;
    /**
     * 
     * @type {PointDto}
     * @memberof MarkerResponseDto
     */
    'point': PointDto;
}
/**
 * 
 * @export
 * @interface OpeningHoursDto
 */
export interface OpeningHoursDto {
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'dayOfWeek': string;
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'firstClosingHour': string;
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'firstOpenHour': string;
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'secondClosingHour': string;
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'secondOpeningHour': string;
    /**
     * 
     * @type {string}
     * @memberof OpeningHoursDto
     */
    'timeZone': string;
}
/**
 * 
 * @export
 * @interface PointDto
 */
export interface PointDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof PointDto
     */
    'coordinates': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PointDto
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface RegisterBusinessDto
 */
export interface RegisterBusinessDto {
    /**
     * 
     * @type {BusinessLocation}
     * @memberof RegisterBusinessDto
     */
    'businessLocation': BusinessLocation;
    /**
     * 
     * @type {BusinessModels}
     * @memberof RegisterBusinessDto
     */
    'businessModel': BusinessModels;
    /**
     * 
     * @type {number}
     * @memberof RegisterBusinessDto
     */
    'businessTypeId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof RegisterBusinessDto
     */
    'categoriesId': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof RegisterBusinessDto
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegisterBusinessDto
     */
    'imageIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RegisterBusinessDto
     */
    'name': string;
    /**
     * 
     * @type {AddressDto}
     * @memberof RegisterBusinessDto
     */
    'newAddress'?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof RegisterBusinessDto
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterBusinessDto
     */
    'userId': string;
}


/**
 * 
 * @export
 * @interface RegisterListingDto
 */
export interface RegisterListingDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterListingDto
     */
    'businessId'?: string;
    /**
     * 
     * @type {BusinessLocation}
     * @memberof RegisterListingDto
     */
    'businessLocation': BusinessLocation;
    /**
     * 
     * @type {BusinessModels}
     * @memberof RegisterListingDto
     */
    'businessModel': BusinessModels;
    /**
     * 
     * @type {Array<number>}
     * @memberof RegisterListingDto
     */
    'categoriesId': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof RegisterListingDto
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegisterListingDto
     */
    'imageIds'?: Array<string>;
    /**
     * 
     * @type {InformationDto}
     * @memberof RegisterListingDto
     */
    'info'?: InformationDto;
    /**
     * 
     * @type {number}
     * @memberof RegisterListingDto
     */
    'listingTypeId': number;
    /**
     * 
     * @type {ListingMetadataDto}
     * @memberof RegisterListingDto
     */
    'metadata'?: ListingMetadataDto;
    /**
     * 
     * @type {string}
     * @memberof RegisterListingDto
     */
    'name': string;
    /**
     * 
     * @type {AddressDto}
     * @memberof RegisterListingDto
     */
    'newAddress'?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof RegisterListingDto
     */
    'userId': string;
}


/**
 * 
 * @export
 * @interface SearchFilterResponse
 */
export interface SearchFilterResponse {
    /**
     * 
     * @type {Array<TypeDto>}
     * @memberof SearchFilterResponse
     */
    'types': Array<TypeDto>;
}
/**
 * 
 * @export
 * @interface SearchListingResponseDto
 */
export interface SearchListingResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof SearchListingResponseDto
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchListingResponseDto
     */
    'limit': number;
    /**
     * 
     * @type {Array<ListingResponseDto>}
     * @memberof SearchListingResponseDto
     */
    'listings'?: Array<ListingResponseDto>;
    /**
     * 
     * @type {Array<MarkerResponseDto>}
     * @memberof SearchListingResponseDto
     */
    'markers'?: Array<MarkerResponseDto>;
    /**
     * 
     * @type {number}
     * @memberof SearchListingResponseDto
     */
    'skip': number;
    /**
     * 
     * @type {number}
     * @memberof SearchListingResponseDto
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface Tags
 */
export interface Tags {
    /**
     * 
     * @type {Array<CategoriesDto>}
     * @memberof Tags
     */
    'categories': Array<CategoriesDto>;
    /**
     * 
     * @type {ListingTypeDto}
     * @memberof Tags
     */
    'type': ListingTypeDto;
}
/**
 * 
 * @export
 * @interface TypeDto
 */
export interface TypeDto {
    /**
     * 
     * @type {Array<CategoriesDto>}
     * @memberof TypeDto
     */
    'categories': Array<CategoriesDto>;
    /**
     * 
     * @type {string}
     * @memberof TypeDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof TypeDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TypeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TypeDto
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface UpdateBusinessDto
 */
export interface UpdateBusinessDto {
    /**
     * 
     * @type {BusinessLocation}
     * @memberof UpdateBusinessDto
     */
    'businessLocation': BusinessLocation;
    /**
     * 
     * @type {BusinessModels}
     * @memberof UpdateBusinessDto
     */
    'businessModel': BusinessModels;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateBusinessDto
     */
    'categoriesId': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessDto
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateBusinessDto
     */
    'imageIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessDto
     */
    'name': string;
    /**
     * 
     * @type {AddressDto}
     * @memberof UpdateBusinessDto
     */
    'newAddress'?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessDto
     */
    'updatedBy': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessDto
     */
    'url'?: string;
}


/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'firstName': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    'isAdmin': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'userType': UserResponseDtoUserTypeEnum;
}

export const UserResponseDtoUserTypeEnum = {
    Business: 'business',
    Normal: 'normal',
    Admin: 'admin'
} as const;

export type UserResponseDtoUserTypeEnum = typeof UserResponseDtoUserTypeEnum[keyof typeof UserResponseDtoUserTypeEnum];


/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationByIP: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/address/ip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/address/markers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationByIP(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationByIP(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarkers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarkerResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarkers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationByIP(options?: AxiosRequestConfig): AxiosPromise<LocationResponseDto> {
            return localVarFp.getLocationByIP(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkers(options?: AxiosRequestConfig): AxiosPromise<Array<MarkerResponseDto>> {
            return localVarFp.getMarkers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public getLocationByIP(options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).getLocationByIP(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public getMarkers(options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).getMarkers(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticated: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/authenticated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isAuthenticated(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isAuthenticated(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticated(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.isAuthenticated(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeSession(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeSession(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public isAuthenticated(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).isAuthenticated(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public revokeSession(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).revokeSession(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BusinessApi - axios parameter creator
 * @export
 */
export const BusinessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinesses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBusiness', 'id', id)
            const localVarPath = `/business/info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterBusinessDto} registerBusinessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerBusiness: async (registerBusinessDto: RegisterBusinessDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerBusinessDto' is not null or undefined
            assertParamExists('registerBusiness', 'registerBusinessDto', registerBusinessDto)
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerBusinessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBusinessDto} updateBusinessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness: async (updateBusinessDto: UpdateBusinessDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateBusinessDto' is not null or undefined
            assertParamExists('updateBusiness', 'updateBusinessDto', updateBusinessDto)
            const localVarPath = `/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBusinessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessApi - functional programming interface
 * @export
 */
export const BusinessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBusinesses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBusinesses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusiness(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusiness(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterBusinessDto} registerBusinessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerBusiness(registerBusinessDto: RegisterBusinessDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerBusiness(registerBusinessDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateBusinessDto} updateBusinessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusiness(updateBusinessDto: UpdateBusinessDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusiness(updateBusinessDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessApi - factory interface
 * @export
 */
export const BusinessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinesses(options?: AxiosRequestConfig): AxiosPromise<Array<BusinessResponseDto>> {
            return localVarFp.getAllBusinesses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiGetBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness(requestParameters: BusinessApiGetBusinessRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessResponseDto> {
            return localVarFp.getBusiness(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiRegisterBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerBusiness(requestParameters: BusinessApiRegisterBusinessRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessResponseDto> {
            return localVarFp.registerBusiness(requestParameters.registerBusinessDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiUpdateBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness(requestParameters: BusinessApiUpdateBusinessRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessResponseDto> {
            return localVarFp.updateBusiness(requestParameters.updateBusinessDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBusiness operation in BusinessApi.
 * @export
 * @interface BusinessApiGetBusinessRequest
 */
export interface BusinessApiGetBusinessRequest {
    /**
     * 
     * @type {string}
     * @memberof BusinessApiGetBusiness
     */
    readonly id: string
}

/**
 * Request parameters for registerBusiness operation in BusinessApi.
 * @export
 * @interface BusinessApiRegisterBusinessRequest
 */
export interface BusinessApiRegisterBusinessRequest {
    /**
     * 
     * @type {RegisterBusinessDto}
     * @memberof BusinessApiRegisterBusiness
     */
    readonly registerBusinessDto: RegisterBusinessDto
}

/**
 * Request parameters for updateBusiness operation in BusinessApi.
 * @export
 * @interface BusinessApiUpdateBusinessRequest
 */
export interface BusinessApiUpdateBusinessRequest {
    /**
     * 
     * @type {UpdateBusinessDto}
     * @memberof BusinessApiUpdateBusiness
     */
    readonly updateBusinessDto: UpdateBusinessDto
}

/**
 * BusinessApi - object-oriented interface
 * @export
 * @class BusinessApi
 * @extends {BaseAPI}
 */
export class BusinessApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public getAllBusinesses(options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).getAllBusinesses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiGetBusinessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public getBusiness(requestParameters: BusinessApiGetBusinessRequest, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).getBusiness(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiRegisterBusinessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public registerBusiness(requestParameters: BusinessApiRegisterBusinessRequest, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).registerBusiness(requestParameters.registerBusinessDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiUpdateBusinessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public updateBusiness(requestParameters: BusinessApiUpdateBusinessRequest, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).updateBusiness(requestParameters.updateBusinessDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListingApi - axios parameter creator
 * @export
 */
export const ListingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllListings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListing: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getListing', 'id', id)
            const localVarPath = `/listing/info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterListingDto} registerListingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerListing: async (registerListingDto: RegisterListingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerListingDto' is not null or undefined
            assertParamExists('registerListing', 'registerListingDto', registerListingDto)
            const localVarPath = `/listing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerListingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListingApi - functional programming interface
 * @export
 */
export const ListingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllListings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListingResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllListings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListing(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListing(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterListingDto} registerListingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerListing(registerListingDto: RegisterListingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerListing(registerListingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListingApi - factory interface
 * @export
 */
export const ListingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllListings(options?: AxiosRequestConfig): AxiosPromise<Array<ListingResponseDto>> {
            return localVarFp.getAllListings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListingApiGetListingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListing(requestParameters: ListingApiGetListingRequest, options?: AxiosRequestConfig): AxiosPromise<ListingResponseDto> {
            return localVarFp.getListing(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListingApiRegisterListingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerListing(requestParameters: ListingApiRegisterListingRequest, options?: AxiosRequestConfig): AxiosPromise<ListingResponseDto> {
            return localVarFp.registerListing(requestParameters.registerListingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getListing operation in ListingApi.
 * @export
 * @interface ListingApiGetListingRequest
 */
export interface ListingApiGetListingRequest {
    /**
     * 
     * @type {string}
     * @memberof ListingApiGetListing
     */
    readonly id: string
}

/**
 * Request parameters for registerListing operation in ListingApi.
 * @export
 * @interface ListingApiRegisterListingRequest
 */
export interface ListingApiRegisterListingRequest {
    /**
     * 
     * @type {RegisterListingDto}
     * @memberof ListingApiRegisterListing
     */
    readonly registerListingDto: RegisterListingDto
}

/**
 * ListingApi - object-oriented interface
 * @export
 * @class ListingApi
 * @extends {BaseAPI}
 */
export class ListingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingApi
     */
    public getAllListings(options?: AxiosRequestConfig) {
        return ListingApiFp(this.configuration).getAllListings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListingApiGetListingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingApi
     */
    public getListing(requestParameters: ListingApiGetListingRequest, options?: AxiosRequestConfig) {
        return ListingApiFp(this.configuration).getListing(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListingApiRegisterListingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingApi
     */
    public registerListing(requestParameters: ListingApiRegisterListingRequest, options?: AxiosRequestConfig) {
        return ListingApiFp(this.configuration).registerListing(requestParameters.registerListingDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSearchFilters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'Goods' | 'Service' | 'Hybrid' | 'All'} listingModel 
         * @param {'Physcial' | 'Online' | 'Both' | 'All'} listingLocationType 
         * @param {boolean} markers 
         * @param {number} total 
         * @param {number} limit 
         * @param {number} skip 
         * @param {Array<string>} [listingTypes] 
         * @param {Array<string>} [categories] 
         * @param {boolean} [hasNext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsByFilter: async (listingModel: 'Goods' | 'Service' | 'Hybrid' | 'All', listingLocationType: 'Physcial' | 'Online' | 'Both' | 'All', markers: boolean, total: number, limit: number, skip: number, listingTypes?: Array<string>, categories?: Array<string>, hasNext?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listingModel' is not null or undefined
            assertParamExists('getListingsByFilter', 'listingModel', listingModel)
            // verify required parameter 'listingLocationType' is not null or undefined
            assertParamExists('getListingsByFilter', 'listingLocationType', listingLocationType)
            // verify required parameter 'markers' is not null or undefined
            assertParamExists('getListingsByFilter', 'markers', markers)
            // verify required parameter 'total' is not null or undefined
            assertParamExists('getListingsByFilter', 'total', total)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getListingsByFilter', 'limit', limit)
            // verify required parameter 'skip' is not null or undefined
            assertParamExists('getListingsByFilter', 'skip', skip)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (listingTypes) {
                localVarQueryParameter['listingTypes'] = listingTypes;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (listingModel !== undefined) {
                localVarQueryParameter['listingModel'] = listingModel;
            }

            if (listingLocationType !== undefined) {
                localVarQueryParameter['listingLocationType'] = listingLocationType;
            }

            if (markers !== undefined) {
                localVarQueryParameter['markers'] = markers;
            }

            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (hasNext !== undefined) {
                localVarQueryParameter['hasNext'] = hasNext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSearchFilters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSearchFilters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'Goods' | 'Service' | 'Hybrid' | 'All'} listingModel 
         * @param {'Physcial' | 'Online' | 'Both' | 'All'} listingLocationType 
         * @param {boolean} markers 
         * @param {number} total 
         * @param {number} limit 
         * @param {number} skip 
         * @param {Array<string>} [listingTypes] 
         * @param {Array<string>} [categories] 
         * @param {boolean} [hasNext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingsByFilter(listingModel: 'Goods' | 'Service' | 'Hybrid' | 'All', listingLocationType: 'Physcial' | 'Online' | 'Both' | 'All', markers: boolean, total: number, limit: number, skip: number, listingTypes?: Array<string>, categories?: Array<string>, hasNext?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchListingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingsByFilter(listingModel, listingLocationType, markers, total, limit, skip, listingTypes, categories, hasNext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSearchFilters(options?: AxiosRequestConfig): AxiosPromise<SearchFilterResponse> {
            return localVarFp.getAllSearchFilters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchApiGetListingsByFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsByFilter(requestParameters: SearchApiGetListingsByFilterRequest, options?: AxiosRequestConfig): AxiosPromise<SearchListingResponseDto> {
            return localVarFp.getListingsByFilter(requestParameters.listingModel, requestParameters.listingLocationType, requestParameters.markers, requestParameters.total, requestParameters.limit, requestParameters.skip, requestParameters.listingTypes, requestParameters.categories, requestParameters.hasNext, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getListingsByFilter operation in SearchApi.
 * @export
 * @interface SearchApiGetListingsByFilterRequest
 */
export interface SearchApiGetListingsByFilterRequest {
    /**
     * 
     * @type {'Goods' | 'Service' | 'Hybrid' | 'All'}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly listingModel: 'Goods' | 'Service' | 'Hybrid' | 'All'

    /**
     * 
     * @type {'Physcial' | 'Online' | 'Both' | 'All'}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly listingLocationType: 'Physcial' | 'Online' | 'Both' | 'All'

    /**
     * 
     * @type {boolean}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly markers: boolean

    /**
     * 
     * @type {number}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly total: number

    /**
     * 
     * @type {number}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly limit: number

    /**
     * 
     * @type {number}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly skip: number

    /**
     * 
     * @type {Array<string>}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly listingTypes?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly categories?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SearchApiGetListingsByFilter
     */
    readonly hasNext?: boolean
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getAllSearchFilters(options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getAllSearchFilters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchApiGetListingsByFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getListingsByFilter(requestParameters: SearchApiGetListingsByFilterRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getListingsByFilter(requestParameters.listingModel, requestParameters.listingLocationType, requestParameters.markers, requestParameters.total, requestParameters.limit, requestParameters.skip, requestParameters.listingTypes, requestParameters.categories, requestParameters.hasNext, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserInfo', 'id', id)
            const localVarPath = `/user/info/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserApiGetUserInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(requestParameters: UserApiGetUserInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.getUserInfo(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserInfo operation in UserApi.
 * @export
 * @interface UserApiGetUserInfoRequest
 */
export interface UserApiGetUserInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetUserInfo
     */
    readonly id: string
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiGetUserInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfo(requestParameters: UserApiGetUserInfoRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


